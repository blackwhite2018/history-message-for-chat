{"version":3,"sources":["components/MessageHistory/Message/Message.jsx","components/MessageHistory/Response/Response.jsx","components/MessageHistory/Typing/Typing.jsx","components/MessageHistory/MessageHistory.jsx","components/MessageHistory/MessageStore.js","App.jsx","serviceWorker.js","index.js"],"names":["Message","item","name","time","text","className","Response","Typing","MessageHistory","list","map","component","id","from","type","newObj","key","defaultProps","PropTypes","array","messages","App","MessageStore","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"oKAyBeA,EAtBC,SAAC,GAAD,QAAGC,KAAQC,EAAX,EAAWA,KAAMC,EAAjB,EAAiBA,KAAMC,EAAvB,EAAuBA,KAAvB,OACZ,4BACI,yBAAKC,UAAU,gBACX,0BAAMA,UAAU,qBAAoB,uBAAGA,UAAU,wBAA4BH,GAC7E,0BAAMG,UAAU,qBAAsBF,IAE1C,yBAAKE,UAAU,sBACTD,KCgBCE,EAvBE,SAAC,GAAD,QAAGL,KAAQC,EAAX,EAAWA,KAAMC,EAAjB,EAAiBA,KAAMC,EAAvB,EAAuBA,KAAvB,OACb,wBAAIC,UAAU,YACV,yBAAKA,UAAU,4BACX,0BAAMA,UAAU,qBAAsBF,GAD1C,aAEI,0BAAME,UAAU,qBAAsBH,GACtC,uBAAGG,UAAU,qBAEjB,yBAAKA,UAAU,qCACTD,KCPCG,EAFA,kBAAM,MCIfC,EAAiB,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAH,OACnB,4BAEQA,EAAKC,KAAI,YAA+C,IAChDC,EADIC,EAA2C,EAA3CA,GAAYV,EAA+B,EAAvCW,KAAQX,KAAQY,EAAuB,EAAvBA,KAEtBC,EAAS,CAACb,OAAMC,KAF6B,EAAjBA,KAENC,KAFuB,EAAXA,MAIxC,OAAOU,GACH,IAAK,UACDH,EAAY,kBAAC,EAAD,CAASK,IAAMJ,EAAKX,KAAOc,IACvC,MACJ,IAAK,WACDJ,EAAY,kBAAC,EAAD,CAAUK,IAAMJ,EAAKX,KAAOc,IACxC,MACJ,IAAK,SACDJ,EAAY,kBAAC,EAAD,CAAQK,IAAMJ,IAGlC,OAAOD,OAMvBH,EAAeS,aAAe,CAC1BR,K,OAAMS,EAAUC,OASLX,QCOAY,EA/CE,CAChB,CACCR,GAAI,cACJC,KAAM,CACLX,KAAM,kCAEPY,KAAM,WACNX,KAAM,QACNC,KAAM,kRAEP,CACCQ,GAAI,cACJC,KAAM,CACLX,KAAM,wCAEPY,KAAM,UACNX,KAAM,QACNC,KAAM,8bAEP,CACCQ,GAAI,cACJC,KAAM,CACLX,KAAM,kCAEPY,KAAM,WACNX,KAAM,QACNC,KAAM,8rBAEP,CACCQ,GAAI,cACJC,KAAM,CACLX,KAAM,wCAEPY,KAAM,UACNX,KAAM,QACNC,KAAM,6RAEP,CACCQ,GAAI,cACJC,KAAM,CACLX,KAAM,wCAEPY,KAAM,SACNX,KAAM,UC5BOkB,G,MAVH,kBACX,yBAAKhB,UAAU,sBACX,yBAAKA,UAAU,QACX,yBAAKA,UAAU,gBACZ,kBAAC,EAAD,CAAgBI,KAAOa,SCGfC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.48e84ae3.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Message = ({ item: { name, time, text } }) => (\r\n    <li>\r\n        <div className=\"message-data\">\r\n            <span className=\"message-data-name\"><i className=\"fa fa-circle online\"></i>{ name }</span>\r\n            <span className=\"message-data-time\">{ time }</span>\r\n        </div>\r\n        <div className=\"message my-message\">\r\n            { text }\r\n        </div>\r\n    </li>\r\n);\r\n\r\nMessage.propTypes = {\r\n    props: PropTypes.shape({\r\n        item: PropTypes.shape({\r\n            name: PropTypes.string,\r\n            time: PropTypes.string,\r\n            text: PropTypes.string\r\n        })\r\n    })\r\n};\r\n\r\nexport default Message;\r\n\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Response = ({ item: { name, time, text } }) => (\r\n    <li className=\"clearfix\">\r\n        <div className=\"message-data align-right\">\r\n            <span className=\"message-data-time\">{ time }</span> &nbsp; &nbsp;\r\n            <span className=\"message-data-name\">{ name }</span>\r\n            <i className=\"fa fa-circle me\"></i>\r\n        </div>\r\n        <div className=\"message other-message float-right\">\r\n            { text }\r\n        </div>\r\n    </li>\r\n);\r\n\r\nResponse.propTypes = {\r\n    props: PropTypes.shape({\r\n        item: PropTypes.shape({\r\n            name: PropTypes.string,\r\n            time: PropTypes.string,\r\n            text: PropTypes.string\r\n        })\r\n    })\r\n};\r\n\r\nexport default Response;\r\n\r\n","import React from 'react';\r\n\r\nconst Typing = () => null;\r\n\r\nexport default Typing;\r\n\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Message from './Message/Message';\r\nimport Response from './Response/Response';\r\nimport Typing from './Typing/Typing';\r\n\r\nconst MessageHistory = ({ list }) => (\r\n    <ul>\r\n        {\r\n            list.map(({ id, from: { name }, type, time, text }) => {\r\n                let component;\r\n                const newObj = {name, time, text};\r\n                \r\n                switch(type) {\r\n                    case 'message':\r\n                        component = <Message key={ id } item={ newObj } />;\r\n                        break;\r\n                    case 'response':\r\n                        component = <Response key={ id } item={ newObj } />;\r\n                        break;\r\n                    case 'typing':\r\n                        component = <Typing key={ id } />;\r\n                }\r\n\r\n                return component;\r\n            })\r\n        }\r\n    </ul>\r\n);\r\n\r\nMessageHistory.defaultProps = {\r\n    list: PropTypes.array\r\n};\r\n\r\nMessageHistory.propTypes = {\r\n    props: PropTypes.shape({\r\n        list: PropTypes.array\r\n    })\r\n};\r\n\r\nexport default MessageHistory;\r\n\r\n","const messages = [\r\n\t{\r\n\t\tid: 'chat-5-1090',\r\n\t\tfrom: {\r\n\t\t\tname: 'Ольга'\r\n\t\t},\r\n\t\ttype: 'response',\r\n\t\ttime: '10:10',\r\n\t\ttext: 'Привет, Виктор. Как дела? Как идет работа над проектом?'\r\n\t},\r\n\t{\r\n\t\tid: 'chat-5-1091',\r\n\t\tfrom: {\r\n\t\t\tname: 'Виктор'\r\n\t\t},\r\n\t\ttype: 'message',\r\n\t\ttime: '10:12',\r\n\t\ttext: 'Привет. Давай сегодня созвонимся. Проект практически готов, и у меня есть что показать.'\r\n\t},\r\n\t{\r\n\t\tid: 'chat-5-1092',\r\n\t\tfrom: {\r\n\t\t\tname: 'Ольга'\r\n\t\t},\r\n\t\ttype: 'response',\r\n\t\ttime: '10:14',\r\n\t\ttext: 'Не уверена что сегодня получится. Не все еще в офисе. Давай уточню через час. Возникли ли какие-либо проблемы на последней стадии проекта?'\r\n\t},\r\n\t{\r\n\t\tid: 'chat-5-1093',\r\n\t\tfrom: {\r\n\t\t\tname: 'Виктор'\r\n\t\t},\r\n\t\ttype: 'message',\r\n\t\ttime: '10:20',\r\n\t\ttext: 'Нет, все прошло гладко. Очень хочу показать всё команде.'\r\n\t},\r\n\t{\r\n\t\tid: 'chat-5-1094',\r\n\t\tfrom: {\r\n\t\t\tname: 'Виктор'\r\n\t\t},\r\n\t\ttype: 'typing',\r\n\t\ttime: '10:31'\r\n\t}\r\n];\r\n\r\nexport default messages;","import React from 'react';\nimport MessageHistory from './components/MessageHistory/MessageHistory';\nimport MessageStore from './components/MessageHistory/MessageStore';\nimport './css/main.css';\n\nconst App = () => (\n\t<div className=\"clearfix container\">\n    \t<div className=\"chat\">\n        \t<div className=\"chat-history\">\n          \t\t<MessageHistory list={ MessageStore } />\n        \t</div>\n    \t</div>  \n\t</div>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}